{
    "sourceFile": "test_limelightlib.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1738975834165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738975956188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-import limelight\n+import limelight_\n import limelightresults\n import json\n import time\n \n-discovered_limelights = limelight.discover_limelights(debug=True)\n+discovered_limelights = limelight_.discover_limelights(debug=True)\n print(\"discovered limelights:\", discovered_limelights)\n \n if discovered_limelights:\n     limelight_address = discovered_limelights[0] \n-    ll = limelight.Limelight(limelight_address)\n+    ll = limelight_.Limelight(limelight_address)\n     results = ll.get_results()\n     status = ll.get_status()\n     print(\"-----\")\n     print(\"targeting results:\", results)\n"
                },
                {
                    "date": 1738975964297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import limelight_\n+import limelight\n import limelightresults\n import json\n import time\n \n"
                },
                {
                    "date": 1738975971617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import limelight\n+import limelightresults\n+import json\n+import time\n+\n+discovered_limelights = limelight.discover_limelights(debug=True)\n+print(\"discovered limelights:\", discovered_limelights)\n+\n+if discovered_limelights:\n+    limelight_address = discovered_limelights[0] \n+    ll = limelight.Limelight(limelight_address)\n+    results = ll.get_results()\n+    status = ll.get_status()\n+    print(\"-----\")\n+    print(\"targeting results:\", results)\n+    print(\"-----\")\n+    print(\"status:\", status)\n+    print(\"-----\")\n+    print(\"temp:\", ll.get_temp())\n+    print(\"-----\")\n+    print(\"name:\", ll.get_name())\n+    print(\"-----\")\n+    print(\"fps:\", ll.get_fps())\n+    print(\"-----\")\n+    print(\"hwreport:\", ll.hw_report())\n+\n+    ll.enable_websocket()\n+   \n+    # print the current pipeline settings\n+    print(ll.get_pipeline_atindex(0))\n+\n+    # update the current pipeline and flush to disk\n+    pipeline_update = {\n+    'area_max': 98.7,\n+    'area_min': 1.98778\n+    }\n+    ll.update_pipeline(json.dumps(pipeline_update),flush=1)\n+\n+    print(ll.get_pipeline_atindex(0))\n+\n+    # switch to pipeline 1\n+    ll.pipeline_switch(1)\n+\n+    # update custom user data\n+    ll.update_python_inputs([4.2,0.1,9.87])\n+    \n+    \n+    try:\n+        while True:\n+            result = ll.get_latest_results()\n+            parsed_result = limelightresults.parse_results(result)\n+            if parsed_result is not None:\n+                print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n+                #for tag in parsed_result.fiducialResults:\n+                #    print(tag.robot_pose_target_space, tag.fiducial_id)\n+            time.sleep(1)  # Set this to 0 for max fps\n+\n+\n+    except KeyboardInterrupt:\n+        print(\"Program interrupted by user, shutting down.\")\n+    finally:\n+        ll.disable_websocket()\n"
                },
                {
                    "date": 1738976537647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n             result = ll.get_latest_results()\n             parsed_result = limelightresults.parse_results(result)\n             if parsed_result is not None:\n                 print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n+                print(\"python result:\" + result)\n                 #for tag in parsed_result.fiducialResults:\n                 #    print(tag.robot_pose_target_space, tag.fiducial_id)\n             time.sleep(1)  # Set this to 0 for max fps\n \n@@ -59,66 +60,4 @@\n     except KeyboardInterrupt:\n         print(\"Program interrupted by user, shutting down.\")\n     finally:\n         ll.disable_websocket()\n-import limelight\n-import limelightresults\n-import json\n-import time\n-\n-discovered_limelights = limelight_.discover_limelights(debug=True)\n-print(\"discovered limelights:\", discovered_limelights)\n-\n-if discovered_limelights:\n-    limelight_address = discovered_limelights[0] \n-    ll = limelight_.Limelight(limelight_address)\n-    results = ll.get_results()\n-    status = ll.get_status()\n-    print(\"-----\")\n-    print(\"targeting results:\", results)\n-    print(\"-----\")\n-    print(\"status:\", status)\n-    print(\"-----\")\n-    print(\"temp:\", ll.get_temp())\n-    print(\"-----\")\n-    print(\"name:\", ll.get_name())\n-    print(\"-----\")\n-    print(\"fps:\", ll.get_fps())\n-    print(\"-----\")\n-    print(\"hwreport:\", ll.hw_report())\n-\n-    ll.enable_websocket()\n-   \n-    # print the current pipeline settings\n-    print(ll.get_pipeline_atindex(0))\n-\n-    # update the current pipeline and flush to disk\n-    pipeline_update = {\n-    'area_max': 98.7,\n-    'area_min': 1.98778\n-    }\n-    ll.update_pipeline(json.dumps(pipeline_update),flush=1)\n-\n-    print(ll.get_pipeline_atindex(0))\n-\n-    # switch to pipeline 1\n-    ll.pipeline_switch(1)\n-\n-    # update custom user data\n-    ll.update_python_inputs([4.2,0.1,9.87])\n-    \n-    \n-    try:\n-        while True:\n-            result = ll.get_latest_results()\n-            parsed_result = limelightresults.parse_results(result)\n-            if parsed_result is not None:\n-                print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n-                #for tag in parsed_result.fiducialResults:\n-                #    print(tag.robot_pose_target_space, tag.fiducial_id)\n-            time.sleep(1)  # Set this to 0 for max fps\n-\n-\n-    except KeyboardInterrupt:\n-        print(\"Program interrupted by user, shutting down.\")\n-    finally:\n-        ll.disable_websocket()\n"
                },
                {
                    "date": 1738976566161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n             result = ll.get_latest_results()\n             parsed_result = limelightresults.parse_results(result)\n             if parsed_result is not None:\n                 print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n-                print(\"python result:\" + result)\n+                print(\"python result:\" + str(result))\n                 #for tag in parsed_result.fiducialResults:\n                 #    print(tag.robot_pose_target_space, tag.fiducial_id)\n             time.sleep(1)  # Set this to 0 for max fps\n \n"
                },
                {
                    "date": 1738976617571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n             result = ll.get_latest_results()\n             parsed_result = limelightresults.parse_results(result)\n             if parsed_result is not None:\n                 print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n-                print(\"python result:\" + str(result))\n+                print(\"python result:\" + str(result['PythonOut']))\n                 #for tag in parsed_result.fiducialResults:\n                 #    print(tag.robot_pose_target_space, tag.fiducial_id)\n             time.sleep(1)  # Set this to 0 for max fps\n \n"
                },
                {
                    "date": 1738976774903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import limelight\n import limelightresults\n import json\n import time\n+import pprint\n \n discovered_limelights = limelight.discover_limelights(debug=True)\n print(\"discovered limelights:\", discovered_limelights)\n \n"
                },
                {
                    "date": 1738976786986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n             parsed_result = limelightresults.parse_results(result)\n             if parsed_result is not None:\n                 print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n                 print(\"python result:\" + str(result['PythonOut']))\n+                pprint(result)\n                 #for tag in parsed_result.fiducialResults:\n                 #    print(tag.robot_pose_target_space, tag.fiducial_id)\n             time.sleep(1)  # Set this to 0 for max fps\n \n"
                },
                {
                    "date": 1738976892416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import limelight\n import limelightresults\n import json\n import time\n-import pprint\n+from pprint import pprint\n \n discovered_limelights = limelight.discover_limelights(debug=True)\n print(\"discovered limelights:\", discovered_limelights)\n \n"
                },
                {
                    "date": 1738977381010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n             result = ll.get_latest_results()\n             parsed_result = limelightresults.parse_results(result)\n             if parsed_result is not None:\n                 print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n-                print(\"python result:\" + str(result['PythonOut']))\n+                #print(\"python result:\" + str(result['PythonOut']))\n                 pprint(result)\n                 #for tag in parsed_result.fiducialResults:\n                 #    print(tag.robot_pose_target_space, tag.fiducial_id)\n             time.sleep(1)  # Set this to 0 for max fps\n"
                },
                {
                    "date": 1738977400009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n             result = ll.get_latest_results()\n             parsed_result = limelightresults.parse_results(result)\n             if parsed_result is not None:\n                 print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n-                #print(\"python result:\" + str(result['PythonOut']))\n-                pprint(result)\n+                print(\"python result:\" + str(result['PythonOut']))\n+                # pprint(result)\n                 #for tag in parsed_result.fiducialResults:\n                 #    print(tag.robot_pose_target_space, tag.fiducial_id)\n             time.sleep(1)  # Set this to 0 for max fps\n \n"
                }
            ],
            "date": 1738975834165,
            "name": "Commit-0",
            "content": "import limelight\nimport limelightresults\nimport json\nimport time\n\ndiscovered_limelights = limelight.discover_limelights(debug=True)\nprint(\"discovered limelights:\", discovered_limelights)\n\nif discovered_limelights:\n    limelight_address = discovered_limelights[0] \n    ll = limelight.Limelight(limelight_address)\n    results = ll.get_results()\n    status = ll.get_status()\n    print(\"-----\")\n    print(\"targeting results:\", results)\n    print(\"-----\")\n    print(\"status:\", status)\n    print(\"-----\")\n    print(\"temp:\", ll.get_temp())\n    print(\"-----\")\n    print(\"name:\", ll.get_name())\n    print(\"-----\")\n    print(\"fps:\", ll.get_fps())\n    print(\"-----\")\n    print(\"hwreport:\", ll.hw_report())\n\n    ll.enable_websocket()\n   \n    # print the current pipeline settings\n    print(ll.get_pipeline_atindex(0))\n\n    # update the current pipeline and flush to disk\n    pipeline_update = {\n    'area_max': 98.7,\n    'area_min': 1.98778\n    }\n    ll.update_pipeline(json.dumps(pipeline_update),flush=1)\n\n    print(ll.get_pipeline_atindex(0))\n\n    # switch to pipeline 1\n    ll.pipeline_switch(1)\n\n    # update custom user data\n    ll.update_python_inputs([4.2,0.1,9.87])\n    \n    \n    try:\n        while True:\n            result = ll.get_latest_results()\n            parsed_result = limelightresults.parse_results(result)\n            if parsed_result is not None:\n                print(\"valid targets: \", parsed_result.validity, \", pipelineIndex: \", parsed_result.pipeline_id,\", Targeting Latency: \", parsed_result.targeting_latency)\n                #for tag in parsed_result.fiducialResults:\n                #    print(tag.robot_pose_target_space, tag.fiducial_id)\n            time.sleep(1)  # Set this to 0 for max fps\n\n\n    except KeyboardInterrupt:\n        print(\"Program interrupted by user, shutting down.\")\n    finally:\n        ll.disable_websocket()\n"
        }
    ]
}